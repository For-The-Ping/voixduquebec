// Frontend with PoW + guards
const $=(s)=>document.querySelector(s);const $$=(s)=>Array.from(document.querySelectorAll(s));let chart;
async function fetchJSON(u,o={}){const r=await fetch(u,{headers:{'Content-Type':'application/json'},...o});if(!r.ok){const t=await r.text();try{throw new Error(JSON.parse(t).error||t)}catch{throw new Error(t)}}return r.json()}
function renderCandidates(list){const wrap=$('#candidate-list');wrap.innerHTML='';list.forEach(c=>{const id=`cand-${c.id}`;const div=document.createElement('label');div.className='candidate';div.innerHTML=`<input type="radio" name="candidate" value="${c.id}" id="${id}"/><span>${c.name}</span>`;wrap.appendChild(div);});}
function renderTable(res){const m=$('#results-table');m.innerHTML='';const t=document.createElement('table');t.className='table';t.innerHTML=`<thead><tr><th>Candidat</th><th>Votes</th><th>%</th></tr></thead><tbody>${res.map(r=>`<tr><td>${r.name}</td><td>${r.votes}</td><td>${r.percent.toFixed(1)}%</td></tr>`).join('')}</tbody>`;m.appendChild(t);}
function drawDonut(data){const c=$('#chart');const total=data.total||0;const leader=data.leader||null;const labels=data.results.map(r=>r.name);const values=data.results.map(r=>r.votes);const colors=labels.map(n=>{let h=0;for(let i=0;i<n.length;i++)h=(h*31+n.charCodeAt(i))%360;return`hsl(${h} 70% 50%)`});if(chart)chart.destroy();chart=new Chart(c.getContext('2d'),{type:'doughnut',data:{labels,datasets:[{data:values,backgroundColor:colors,borderWidth:0}]},options:{responsive:true,cutout:'65%',plugins:{legend:{display:true,position:'bottom'}}}});const center=$('#center-label');center.innerHTML=(leader&&total>0)?`<div class="lead">${leader.percent.toFixed(1)}%</div><div class="sub">en tête — ${leader.name}<br/><small>Total votes: ${total}</small></div>`:`<div class="lead">0%</div><div class="sub">Aucun vote pour l'instant</div>`;}
async function refresh(){const cands=await fetchJSON('/api/candidates');renderCandidates(cands);const data=await fetchJSON('/api/results');renderTable(data.results);drawDonut(data);}
async function sha256Hex(s){const b=new TextEncoder().encode(s);const d=await crypto.subtle.digest('SHA-256',b);return Array.from(new Uint8Array(d)).map(x=>x.toString(16).padStart(2,'0')).join('')}
function countLeadingZeroBitsFromHex(hex){let bits=0;for(let i=0;i<hex.length;i++){const n=parseInt(hex[i],16);if(n===0){bits+=4;continue}for(let j=3;j>=0;j--){if(((n>>j)&1)===0)bits++;else return bits}}return bits}
async function solvePow(ch,bits){let n=0;while(true){const h=await sha256Hex(`${ch}:${n}`);if(countLeadingZeroBitsFromHex(h)>=bits)return n;n++}}
async function vote(ev){ev.preventDefault();const s=$$('input[name="candidate"]:checked')[0];const msg=$('#msg');if(!s){msg.textContent='Sélectionnez un candidat.';return}try{msg.textContent='Préparation (preuve de travail)…';const {challenge,bits}=await fetchJSON('/api/pow');const nonce=await solvePow(challenge,bits);msg.textContent='Envoi…';await fetchJSON('/api/vote',{method:'POST',body:JSON.stringify({candidateId:Number(s.value),pow:{challenge,nonce}})});msg.textContent='Merci! Vote enregistré.';await refresh()}catch(e){msg.textContent=e.message||'Erreur lors du vote.'}}
document.addEventListener('DOMContentLoaded',async()=>{const f=$('#vote-form');f.addEventListener('submit',vote);await refresh();setInterval(refresh,30000)});
